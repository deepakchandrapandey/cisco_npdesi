#!/usr/bin/env python
'''
Autogenerated code using arya.py
Original Object Document Input: 
{"fvTenant":{"attributes":{"dn":"uni/tn-Accounting","name":"Accounting","descr":"Created by Arya and Cobra Code","rn":"tn-Accounting","status":"created"},"children":[{"fvCtx":{"attributes":{"dn":"uni/tn-Accounting/ctx-external","name":"external","rn":"ctx-external","status":"created"},"children":[]}}]}}

'''
#raise RuntimeError('Please review the auto generated code before ' +
#                    'executing the output. Some placeholders will ' +
#                    'need to be changed')

# list of packages that should be imported for this code to work
import cobra.mit.access
import cobra.mit.request
import cobra.mit.session
import cobra.model.fv
import cobra.model.pol
import requests
from cobra.internal.codec.xmlcodec import toXMLStr
requests.packages.urllib3.disable_warnings()

# log into an APIC and create a directory object
ls = cobra.mit.session.LoginSession('https://apic', 'admin', 'cisco123')
md = cobra.mit.access.MoDirectory(ls)
md.login()

# the top level object on which operations will be made
topMo = cobra.model.pol.Uni('')


# build the request using cobra syntax
fvTenant = cobra.model.fv.Tenant(topMo, name=u'Accounting', descr=u'Created by Arya and Cobra Code')
fvCtx = cobra.model.fv.Ctx(fvTenant, name=u'external')


# commit the generated code to APIC
print toXMLStr(topMo)
c = cobra.mit.request.ConfigRequest()
c.addMo(topMo)
md.commit(c)

